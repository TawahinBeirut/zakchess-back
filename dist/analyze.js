"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPgnToPositions = convertPgnToPositions;
exports.callGpt = callGpt;
exports.createInitRoute = createInitRoute;
exports.createAnalyzeMoveRoute = createAnalyzeMoveRoute;
const chess_js_1 = require("chess.js");
/**
 * Nettoie le PGN pour le rendre compatible avec chess.js
 */
function getCorrectPgn(pgn) {
    // Supprimer toutes les m√©tadonn√©es (tout ce qui est entre crochets)
    const withoutMetadata = pgn.replace(/\[.*?\]\s*/g, "");
    // Supprimer tout ce qui pr√©c√®de le premier coup num√©rot√© (1.)
    const movesText = withoutMetadata.substring(withoutMetadata.indexOf("1."));
    // Supprimer le r√©sultat de la partie (1-0, 0-1, 1/2-1/2)
    const cleanedPgn = movesText.replace("1-0", "").replace("0-1", "").replace("1/2-1/2", "");
    // Diviser le texte en mots en g√©rant √©galement les sauts de ligne
    const words = cleanedPgn.split(/\s+/);
    return words.join(" ");
}
/**
 * Convertit un PGN en liste de positions √† analyser
 */
function convertPgnToPositions(pgn) {
    try {
        // Initialiser une nouvelle partie d'√©checs
        const chess = new chess_js_1.Chess();
        // Charger le PGN nettoy√©
        chess.loadPgn(getCorrectPgn(pgn));
        // R√©cup√©rer l'historique des coups
        const history = chess.history({ verbose: true });
        // Initialiser le tableau des positions
        const positions = [];
        // Cr√©er une nouvelle instance pour reconstruire la partie coup par coup
        const gameAnalysis = new chess_js_1.Chess();
        // Parcourir chaque coup pour obtenir la position FEN avant le coup
        for (let i = 0; i < history.length; i++) {
            const move = history[i];
            const turn = (i % 2 === 0) ? 'w' : 'b';
            // Capturer la position FEN avant de jouer le coup
            const fen = gameAnalysis.fen();
            // Ajouter la position au tableau
            positions.push({
                fen: fen,
                playedMove: move.san,
                turn: turn,
                moveIndex: i
            });
            // Jouer le coup pour pr√©parer la position suivante
            gameAnalysis.move(move.san);
        }
        return positions;
    }
    catch (error) {
        console.error("Erreur lors de la conversion du PGN:", error);
        throw new Error("Le format PGN fourni est invalide ou corrompu");
    }
}
/**
 * Appel √† l'API OpenAI pour analyser une position
 */
async function callGpt(openai, position) {
    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
                {
                    role: "system",
                    content: `Tu es un expert en √©checs. √Ä partir d'une position FEN, tu vas analyser le coup jou√© en utilisant Stockfish pour d√©terminer l'√©valuation, le meilleur coup √† jouer et la classification du coup jou√© (par exemple, 'Brillant', 'Tr√®s bon', 'Erreur', etc.). Ensuite, tu r√©diges une analyse compl√®te et structur√©e du coup jou√©, avec les informations suivantes :

1. √âvaluation du moteur : [√©valuation num√©rique de Stockfish]
2. Classification du coup jou√© : [classification comme 'Brillant', 'Tr√®s bon', 'Erreur', etc.]
3. Meilleur coup selon Stockfish : [meilleur coup sugg√©r√©]
4. Analyse d√©taill√©e sous ce format :
   - Les Noirs ont un [avantage/d√©savantage] ([√©valuation num√©rique]) mais doivent √™tre attentifs √† [coup critique des Blancs]
   - Explications de la meilleure ligne de Stockfish NNUE :
     ‚ö´ [meilleure ligne donn√©e avec coups successifs, format√©]
     [justification du premier coup]
   - Menaces principales :
     [coup des Blancs avec √©valuation approximative]
     [Effet sur les plans ou coups forts des Noirs]
   - Comment trouver le meilleur coup ?
     Id√©e : [Ce que les Noirs veulent faire √† moyen terme]
     Probl√®me : [Pourquoi une autre suite serait moins bonne ou ill√©gale]
     Solution : [Plan corrig√©, illustr√© avec une ligne]
   - Faire attention aux points suivants :
     - [√©l√©ments strat√©giques ou tactiques cl√©s dans la position]
   - üß† Point th√©orique :
     [explication sur le type d'ouverture ou la strat√©gie centrale dans cette position]
   - üéØ Th√®mes √† travailler :
     Liste uniquement les th√®mes ou motifs tactiques/strat√©giques pertinents dans la position actuelle (par exemple : fourchette, clouage, case faible, initiative, rupture de pion, coordination des pi√®ces, etc.). Ne pas inventer ou g√©n√©raliser.
   - üìå Analyse du coup jou√© :
     Compare le coup r√©ellement jou√© avec le meilleur coup sugg√©r√© par Stockfish. Explique pourquoi c'est bon ou non, ce que √ßa rate ou compromet, et comment le joueur pourrait mieux r√©agir dans une situation similaire √† l'avenir.

Sois p√©dagogique et clair, utilise un langage simple mais pr√©cis. Toujours illustrer avec des variantes concr√®tes. Ne donne aucune autre sortie que ce format.`
                },
                {
                    role: "user",
                    content: `FEN : ${position.fen}\nTour de jeu : ${position.turn}\nCoup jou√© : ${position.playedMove}`
                }
            ]
        });
        return completion.choices[0].message.content || "Aucune analyse disponible";
    }
    catch (error) {
        console.error('Erreur lors de l\'appel √† OpenAI:', error);
        throw new Error(`√âchec de l'analyse pour le coup ${position.playedMove}`);
    }
}
// Cr√©er le middleware pour l'init route qui renvoie juste la liste des coups sans les analyser
function createInitRoute(openai) {
    return async (req, res) => {
        if (!req.body) {
            return res.status(400).json({ error: 'Corps de requ√™te vide ou invalide' });
        }
        try {
            const { pgn } = req.body;
            if (!pgn) {
                return res.status(400).json({ error: 'PGN requis pour l\'analyse' });
            }
            // √âtape 1: Convertir le PGN en positions
            const positions = convertPgnToPositions(pgn);
            // Si aucune position n'a √©t√© trouv√©e, retourner une erreur
            if (positions.length === 0) {
                return res.status(400).json({
                    error: 'Aucun coup valide trouv√© dans le PGN fourni'
                });
            }
            // Pr√©parer la liste des coups sans analyse
            const movesList = positions.map(position => ({
                fen: position.fen,
                playedMove: position.playedMove,
                turn: position.turn,
                moveIndex: position.moveIndex
            }));
            // Renvoyer la liste des coups
            res.json({
                totalMoves: positions.length,
                moves: movesList
            });
        }
        catch (error) {
            console.error('Erreur lors de l\'initialisation:', error);
            res.status(500).json({
                error: 'Erreur lors de l\'analyse de la partie',
                details: error instanceof Error ? error.message : "Erreur inconnue"
            });
        }
    };
}
// Cr√©er le middleware pour analyser un coup sp√©cifique
function createAnalyzeMoveRoute(openai) {
    return async (req, res) => {
        if (!req.body) {
            return res.status(400).json({ error: 'Corps de requ√™te vide ou invalide' });
        }
        try {
            const { fen, playedMove, turn, moveIndex } = req.body;
            if (!fen || !playedMove || !turn || moveIndex === undefined) {
                return res.status(400).json({
                    error: 'Tous les param√®tres sont requis (fen, playedMove, turn, moveIndex)'
                });
            }
            const position = { fen, playedMove, turn, moveIndex };
            // Analyser le coup
            try {
                const analysis = await callGpt(openai, position);
                res.json({
                    fen,
                    playedMove,
                    turn,
                    moveIndex,
                    analysis
                });
            }
            catch (error) {
                console.error(`√âchec de l'analyse pour ${playedMove}:`, error);
                res.status(500).json({
                    fen,
                    playedMove,
                    turn,
                    moveIndex,
                    error: error instanceof Error ? error.message : "Erreur inconnue"
                });
            }
        }
        catch (error) {
            console.error('Erreur lors de l\'analyse du coup:', error);
            res.status(500).json({
                error: 'Erreur lors de l\'analyse du coup',
                details: error instanceof Error ? error.message : "Erreur inconnue"
            });
        }
    };
}
